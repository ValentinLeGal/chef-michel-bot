const fetch = require('node-fetch');
const Parser = require('rss-parser');

const parser = new Parser();

module.exports = async (client, message) => {
  let cachedVideoId = null;
  let doOnce = false;

  /**
   * Permet de changer le statut al√©atoirement chaque heure.
   */
  const changeStatus = async () => {
    let mins = new Date().getMinutes();
    if (mins == '00') {
      if (!doOnce) {
        // On r√©cup√®re une activit√© al√©atoire
        const { activity } = await fetch(
          `${process.env.API_URL}/activities/random?statsToken=${process.env.STATS_TOKEN}`
        ).then((res) => res.json());

        // On met √† jour l'activit√© du bot
        client.user.setPresence({
          activity: {
            name: activity,
          },
        });
      }

      // On ex√©cute la fonction qu'une fois dans la minute
      doOnce = true;
    } else {
      doOnce = false;
    }
  };

  /**
   * Permet d'envoyer un message √† tous les serveurs utilisant le bot
   * @param {String} msg Le message √† envoyer.
   */
  const sendMessageAllGuilds = (msg) => {
    const guilds = client.guilds.cache;

    guilds.forEach((guild) => {
      const channel = guild.channels.cache.find(
        (c) =>
          c.type === 'text' && c.permissionsFor(guild.me).has('SEND_MESSAGES')
      );

      if (channel) {
        channel.send(msg);
      }
    });
  };

  /**
   * Permet de v√©rifier si une nouvelle vid√©o est sortie.
   */
  const checkNewVideo = async () => {
    const { items: videos } = await parser.parseURL(
      'https://www.youtube.com/feeds/videos.xml?channel_id=UCSLyEx8ISkp567AjOAHYN5Q'
    );

    // On r√©cup√®re l'ID de la derni√®re vid√©o
    const lastFeedVideo = videos[0];

    // On raccourci le lien pour avoir un "youtu.be"
    const shortLink = `https://youtu.be/${lastFeedVideo.link.split('=')[1]}`;

    if (null === cachedVideoId) {
      // Si le cache est √† null, on met √† jour le cache et on ne notifie pas
      cachedVideoId = lastFeedVideo.id;
    } else if (lastFeedVideo.id !== cachedVideoId) {
      // Si l'ID de la derni√®re vid√©o r√©cup√©r√©e est diff√©rente de celui en cache, on met √† jour et on notifie
      cachedVideoId = lastFeedVideo;
      sendMessageAllGuilds(
        `Nouvelle vid√©o @everyone, comme √ßa !\n\nüé• ${shortLink}`
      );
    }
  };

  // Le bot envoie un message quand il est ajout√© sur un serveur
  client.on('guildCreate', (guild) => {
    const channel = guild.channels.cache.find(
      (c) =>
        c.type === 'text' && c.permissionsFor(guild.me).has('SEND_MESSAGES')
    );

    if (channel) {
      channel.send(
        "Salut mes amis et bienvenue √† la maison !\nN'h√©sitez pas √† faire un `!chef`, comme √ßa !"
      );
    }
  });

  // On d√©finit un statut par d√©faut pour le bot au d√©marrage
  client.user.setPresence({
    activity: {
      name: 'tourner et retourner',
    },
  });

  // On ex√©cute la fonction pour changer le statut toutes les secondes
  setInterval(changeStatus, 1000);

  // On ex√©cute la fonction pour v√©rifier si une nouvelle vid√©o est sortie toutes les 10 minutes
  setInterval(checkNewVideo, 600000);

  // On affiche un message dans la console quand le bot est pr√™t
  console.log('Super nickel !');
};
